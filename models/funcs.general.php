<?phpfunction optimizeTables() {	$res = mysql_query('SHOW TABLE STATUS WHERE Data_free / Data_length > 0.1 AND Data_free > 102400');	while($row = mysql_fetch_assoc($res)) {		mysql_query('OPTIMIZE TABLE ' . $row['Name']);}}function mobile_listen() {	$useragent=$_SERVER['HTTP_USER_AGENT'];	if(preg_match('/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i',$useragent)||preg_match('/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i',substr($useragent,0,4)))	{		echo '<meta http-equiv="refresh" content="0; URL=https://openex.mobi">';	} }function memcache_init(){	include("ratelimiter.php");	//memcached listener 	$memcache_obj = new Memcache; 	$memcache_obj->addServer('memcache_host', 11211);	$rateLimiter = new RateLimiter(new Memcache(), $_SERVER["REMOTE_ADDR"]);	try {		$rateLimiter->limitRequestsInMinutes(15, 1);	} catch (RateExceededException $e) {		header("HTTP/1.0 529 Too Many Requests");		exit;	}}function getuseragent(){	if(strpos($_SERVER['HTTP_USER_AGENT'], 'MSIE') == TRUE) {		$u_agent = "Internet Explorer";	}	elseif(strpos($_SERVER['HTTP_USER_AGENT'], 'Chrome') == TRUE) {		$u_agent = "Google Chrome";	}	elseif(strpos($_SERVER['HTTP_USER_AGENT'], 'Opera Mini') == TRUE) {		$u_agent = "Opera Mini";	}	elseif(strpos($_SERVER['HTTP_USER_AGENT'], 'Opera') == TRUE) {		$u_agent = "Opera";	}	elseif(strpos($_SERVER['HTTP_USER_AGENT'], 'Firefox/25.0') == TRUE) {		$u_agent = "Mozilla Firefox";	}	elseif(strpos($_SERVER['HTTP_USER_AGENT'], 'Safari') == TRUE) {		$u_agent = "Safari";	}	else { 		$u_agent = "Unknown/Other";	}		return $u_agent;}function gettime(){	{	$tmvari = date("F j, Y, g:i a");	}	return $tmvari;}function load_monit_init(){	$load = sys_getloadavg();	$sleep=5;	$maxload=2;	if ($load[0] > $maxload) {		   sleep($sleep);		echo "Busy server - sleep $sleep seconds<br>";	}}function TakeMoney($amount, $user, $currency, $fs=false){    $sell = @mysql_query("SELECT * FROM balances WHERE `User_ID`='$user' AND `Wallet_ID`='$currency'");    $id   = @mysql_result($sell, 0, "id");        $old = mysql_result($sell, 0, "Amount");        if ($old >= $amount OR $fs == true) {            $new = $old - $amount;			$new = sprintf("%2.8f", $new);            mysql_query("UPDATE balances SET `Amount` = '$new' WHERE `User_ID` = '$user' AND `Wallet_ID` = '$currency';");            return true;        } else {		            return false;			        }}function AddMoney($amount, $user, $currency){    $sell = @mysql_query("SELECT * FROM balances WHERE `User_ID`='$user' AND `Wallet_ID`='$currency'");    $id   = @mysql_result($sell, 0, "id");    if ($id <= 0.00000001) {        mysql_query("INSERT INTO  balances (`User_ID`,`Amount`,`Coin`,`Pending`,`Wallet_ID`) VALUES ('$user','$amount','$currency','0','$currency');");    } else {	        $old = mysql_result($sell, 0, "Amount");        $new = $old + $amount;		$new = sprintf("%2.8f", $new);    mysql_query("UPDATE balances SET `Amount` = $new WHERE `User_ID` = '$user' AND `Wallet_ID` = '$currency';");    }}function GetPosts($thread){    $sql = mysql_query("SELECT * FROM TicketReplies WHERE `ticket_id` = '$thread'");    $num = @mysql_num_rows($sql);    $x   = 0;    for ($i = 0; $i < $num; $i++) {        $x = $x + 1;    }    return $x;    }function GetUser($owner){        $sql = mysql_query("SELECT * FROM userCake_Users WHERE `User_ID`=$owner");        return mysql_result($sql, 0, "Username_Clean");    }function sanitize($str){        return strtolower(strip_tags(trim(($str))));    }function isValidEmail($email){        return preg_match("/([\w\-]+\@[\w\-]+\.[\w\-]+)/", trim($email));    }function minMaxRange($min, $max, $what){        if (strlen(trim($what)) < $min)        return true;        else if (strlen(trim($what)) > $max)        return true;        else        return false;    }//@ Thanks to - http://phpsec.orgfunction generateHash($plainText, $salt = null){        if ($salt === null) {                $salt = substr(md5(uniqid(rand(), true)), 0, 25);            }        else {                $salt = substr($salt, 0, 25);            }                return $salt . hash('sha512', ($salt . $plainText));;    }function replaceDefaultHook($str){        global $default_hooks, $default_replace;                return (str_replace($default_hooks, $default_replace, $str));    }function getUniqueCode($length = ""){        $code = md5(uniqid(rand(), true));        if ($length != "")        return substr($code, 0, $length);        else        return $code;    }function errorBlock($errors){        if (!count($errors) > 0) {                return false;            }        else {                echo "<ul>";                foreach ($errors as $error) {                        echo "<li>" . $error . "</li>";                    }                echo "</ul>";            }    }function lang($key, $markers = NULL){        global $lang;                if ($markers == NULL) {                $str = $lang[$key];            }        else {                //Replace any dyamic markers                $str = $lang[$key];                                $iteration = 1;                                foreach ($markers as $marker) {                        $str = str_replace("%m" . $iteration . "%", $marker, $str);                                                $iteration++;                    }            }                //Ensure we have something to return        if ($str == "") {                return ("No language key found");            }        else {                return $str;            }    }function destorySession($name){        if (isset($_SESSION[$name])) {                $_SESSION[$name] = NULL;                                unset($_SESSION[$name]);            }    }//r3wts classesfunction getIP(){    foreach (array(        'HTTP_CLIENT_IP',        'HTTP_X_FORWARDED_FOR',        'HTTP_X_FORWARDED',        'HTTP_X_CLUSTER_CLIENT_IP',        'HTTP_FORWARDED_FOR',        'HTTP_FORWARDED',        'REMOTE_ADDR'    ) as $key) {        if (array_key_exists($key, $_SERVER) === true) {            foreach (array_map('trim', explode(',', $_SERVER[$key])) as $ip) {                if (filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_NO_PRIV_RANGE | FILTER_FLAG_NO_RES_RANGE) !== false) {                    return $ip;                }            }        }    }}class formKey  {      private $formKey;        private $old_formKey;      private function generateKey()  	{  		function crypto_rand_secure($min, $max) {			$range = $max - $min;			if ($range < 0) return $min; 			$log = log($range, 2);			$bytes = (int) ($log / 8) + 1;			$bits = (int) $log + 1; 			$filter = (int) (1 << $bits) - 1; 			do {				$rnd = hexdec(bin2hex(openssl_random_pseudo_bytes($bytes)));				$rnd = $rnd & $filter;			} while ($rnd >= $range);			return $min + $rnd;		}		$length = 1024;		$lsalt = 32;		$uniqid = base64_encode(mcrypt_create_iv(ceil(0.15*$lsalt), MCRYPT_DEV_URANDOM));				function getToken($length){			$token = $uniqid;			$codeAlphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";			$codeAlphabet.= "abcdefghijklmnopqrstuvwxyz";			$codeAlphabet.= "0123456789";			for($i=0;$i<$length;$i++){			$token .= $codeAlphabet[crypto_rand_secure(0,strlen($codeAlphabet))];		}		return $token;		}				$ip = getIP();  		  		//Return the hash  		return md5($ip . $token . $length);  	} 	public function outputKey()  	{  		//Generate the key and store it inside the class  		$this->formKey = $this->generateKey();  		//Store the form key in the session  		$_SESSION['form_key'] = $this->formKey;  		  		//Output the form key  		echo "<input type='hidden' name='form_key' id='form_key' value='".$this->formKey."' />";	}  		//The constructor stores the form key (if one exists) in our class variable.  	function __construct()  	{  		//We need the previous key so we store it  		if(isset($_SESSION['form_key']))  		{  			$this->old_formKey = $_SESSION['form_key'];  		}  	}	public function validate()  	{  		//We use the old formKey and not the new generated version  		if($_POST['form_key'] == $this->old_formKey)  		{  			//The key is valid, return true.  			return true;  		}  		else  		{  			//The key is invalid, return false.  			return false;  		}  	}  }function isTORnode() {	$ipvart = getIP();	ini_set('auto_detect_line_endings',TRUE);	$filename = "torlist.csv";	$data = file_get_contents($filename);	$t_array = explode("\n",$data);	foreach($t_array as $key=>$value)	{		if(is_null($value) || $value == '')			unset($t_array[$key]);	}	for ($i = 0; $i < count($t_array); ++$i) {        if ($t_array[$i] == $ipvart) {			return true;		}else {			return false;		}    }	ini_set('auto_detect_line_endings',FALSE);}function isIPbanned() {	$ipvars = mysql_real_escape_string(getIP());	$sqlxyzr = mysql_query("SELECT * FROM bantables_ip WHERE `ip`='$ipvars'");	if (mysql_num_rows($sqlxyzr) > 0) {		return true;	}else{		return false;	}}?>